{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Laurent\\\\PFE\\\\mobile_app\\\\src\\\\components\\\\Scan.js\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport DataService from \"../services/Services\";\nimport { useHistory } from \"react-router-dom\";\nexport default function Scan() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  var history = useHistory();\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref) {\n    var type = _ref.type,\n        data = _ref.data;\n    setScanned(true);\n    alert(\"Bar code with type \" + type + \" and data \" + data + \" has been scanned!\");\n  };\n\n  var sendMobileScan = function sendMobileScan(_ref2) {\n    var data = _ref2.data;\n    setScanned(true);\n    var fields = {\n      QRCodeContent: data,\n      phoneId: \"1234\",\n      scanDate: Date.now()\n    };\n    DataService.sendMobileScan(fields).then(function (response) {\n      console.log(response.message);\n      alert(\"Response : \" + response.message);\n    }).catch(function (e) {\n      console.log(e);\n      alert(\"Error : \" + e);\n    });\n    history.push(\"/\");\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 12\n      }\n    }, \"Requesting for camera permission\");\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 12\n      }\n    }, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      flexDirection: 'column',\n      justifyContent: 'flex-end'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: scanned ? undefined : sendMobileScan,\n    style: StyleSheet.absoluteFillObject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }), scanned && React.createElement(Button, {\n    title: 'Tap to Scan Again',\n    onPress: function onPress() {\n      return setScanned(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 19\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/Laurent/PFE/mobile_app/src/components/Scan.js"],"names":["React","useState","useEffect","BarCodeScanner","DataService","useHistory","Scan","hasPermission","setHasPermission","scanned","setScanned","history","requestPermissionsAsync","status","handleBarCodeScanned","type","data","alert","sendMobileScan","fields","QRCodeContent","phoneId","scanDate","Date","now","then","response","console","log","message","catch","e","push","flex","flexDirection","justifyContent","undefined","StyleSheet","absoluteFillObject"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;AAEA,SAASC,cAAT,QAA+B,sBAA/B;AACA,OAAOC,WAAP;AAEA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA,kBACaL,QAAQ,CAAC,IAAD,CADrB;AAAA;AAAA,MACtBM,aADsB;AAAA,MACPC,gBADO;;AAAA,mBAECP,QAAQ,CAAC,KAAD,CAFT;AAAA;AAAA,MAEtBQ,OAFsB;AAAA,MAEbC,UAFa;;AAI7B,MAAMC,OAAO,GAAGN,UAAU,EAA1B;AAEAH,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC0BC,cAAc,CAACS,uBAAf,EAD1B;;AAAA;AAAA;AACSC,cAAAA,MADT,yBACSA,MADT;AAECL,cAAAA,gBAAgB,CAACK,MAAM,KAAK,SAAZ,CAAhB;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAID,GALQ,EAKN,EALM,CAAT;;AAOA,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAAoB;AAAA,QAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,QAAXC,IAAW,QAAXA,IAAW;AAC/CN,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAO,IAAAA,KAAK,yBAAuBF,IAAvB,kBAAwCC,IAAxC,wBAAL;AACD,GAHD;;AAKA,MAAME,cAAc,GAAG,SAAjBA,cAAiB,QAAc;AAAA,QAAXF,IAAW,SAAXA,IAAW;AACnCN,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,QAAIS,MAAM,GAAG;AACXC,MAAAA,aAAa,EAAEJ,IADJ;AAEXK,MAAAA,OAAO,EAAE,MAFE;AAGXC,MAAAA,QAAQ,EAAEC,IAAI,CAACC,GAAL;AAHC,KAAb;AAKApB,IAAAA,WAAW,CAACc,cAAZ,CAA2BC,MAA3B,EACGM,IADH,CACQ,UAAAC,QAAQ,EAAI;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,OAArB;AACAZ,MAAAA,KAAK,iBAAeS,QAAQ,CAACG,OAAxB,CAAL;AACD,KAJH,EAKGC,KALH,CAKS,UAAAC,CAAC,EAAI;AACVJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,CAAZ;AACAd,MAAAA,KAAK,cAAYc,CAAZ,CAAL;AACD,KARH;AASApB,IAAAA,OAAO,CAACqB,IAAR,CAAa,GAAb;AACD,GAjBD;;AAmBA,MAAIzB,aAAa,KAAK,IAAtB,EAA4B;AAC1B,WAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAP;AACD;;AACD,MAAIA,aAAa,KAAK,KAAtB,EAA6B;AAC3B,WAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AACD;;AAED,SACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACL0B,MAAAA,IAAI,EAAE,CADD;AAELC,MAAAA,aAAa,EAAE,QAFV;AAGLC,MAAAA,cAAc,EAAE;AAHX,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,oBAAC,cAAD;AACE,IAAA,gBAAgB,EAAE1B,OAAO,GAAG2B,SAAH,GAAelB,cAD1C;AAEE,IAAA,KAAK,EAAEmB,UAAU,CAACC,kBAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAWG7B,OAAO,IAAI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAE,mBAAf;AAAoC,IAAA,OAAO,EAAE;AAAA,aAAMC,UAAU,CAAC,KAAD,CAAhB;AAAA,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXd,CADF;AAeD","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Text, View, StyleSheet, Button } from 'react-native';\r\nimport { BarCodeScanner } from 'expo-barcode-scanner';\r\nimport DataService from \"../services/Services\";\r\n// import { createBrowserHistory } from \"history\";\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\nexport default function Scan() {\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n  const [scanned, setScanned] = useState(false);\r\n\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\r\n      setHasPermission(status === 'granted');\r\n    })();\r\n  }, []);\r\n\r\n  const handleBarCodeScanned = ({ type, data }) => {\r\n    setScanned(true);\r\n    alert(`Bar code with type ${type} and data ${data} has been scanned!`);\r\n  };\r\n\r\n  const sendMobileScan = ({ data }) => {\r\n    setScanned(true);\r\n    var fields = {\r\n      QRCodeContent: data,\r\n      phoneId: \"1234\",\r\n      scanDate: Date.now()\r\n    };\r\n    DataService.sendMobileScan(fields)\r\n      .then(response => {\r\n        console.log(response.message);\r\n        alert(`Response : ${response.message}`);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n        alert(`Error : ${e}`);\r\n      });\r\n    history.push(\"/\");\r\n  }\r\n\r\n  if (hasPermission === null) {\r\n    return <Text>Requesting for camera permission</Text>;\r\n  }\r\n  if (hasPermission === false) {\r\n    return <Text>No access to camera</Text>;\r\n  }\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        flex: 1,\r\n        flexDirection: 'column',\r\n        justifyContent: 'flex-end',\r\n      }}>\r\n      <BarCodeScanner\r\n        onBarCodeScanned={scanned ? undefined : sendMobileScan}\r\n        style={StyleSheet.absoluteFillObject}\r\n      />\r\n\r\n      {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}\r\n    </View>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}